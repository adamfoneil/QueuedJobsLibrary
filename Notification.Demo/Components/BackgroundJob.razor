@inject JobTrackerRepository Jobs
@implements IDisposable

@if (JobInfo != null)
{
    <h3>Background Job: @JobInfo.RequestType, Id = @JobInfo.Id</h3>
    <div class="d-flex align-items-center">
        @if (JobInfo.IsRunning)
        {
            <div>
                <span><img src="~/img/loading.gif"/>Running</span>
            </div>                        
        }

        <div>
            <span>Status: @JobInfo.Status.ToString()</span>            
        </div>

        @if (JobInfo.Started.HasValue)
        {
            <div>
                <span>Started: @JobInfo.Started</span>
            </div>
        }
               
        @if (JobInfo.Completed.HasValue)
        {
            <div>
                <span>Completed: @JobInfo.Completed</span>
                <span class="ml-2">Duration: @JobInfo.Duration sec</span>
            </div>
        }

        <div>
            <button class="btn btn-sm btn-light ml-2" @onclick="ClearNotification">clear</button>
        </div>
    </div>
    
    <div>
        @ChildContent
    </div>    
}

<hr/>

@code { 
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Jobs.StatusUpdated += JobUpdated;
    }

    [Parameter]
    public JobTracker JobInfo { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback Cleared { get; set; }

    async Task ClearNotification()
    {
        await Jobs.ClearNotificationAsync(JobInfo.Id);
        await Cleared.InvokeAsync();
    }

    void JobUpdated(JobTracker job)
    {
        if (job.Id == JobInfo.Id)
        {
            JobInfo = job;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Jobs.StatusUpdated -= JobUpdated;
    }
}
